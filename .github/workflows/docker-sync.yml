name: Docker image sync

on:
  repository_dispatch:
  push:
    branches:
      - release1/*
    tags:
      - "v*"   #Push events to matching v*,i.e. v1.0 v20.15.10
  workflow_dispatch:
    inputs:
      image_name:
        type: string
        description: image name (jenkins)
        required: true
      pull_url:
        type: string
        description: pull url (jenkins/jenkins)
        required: true
      image_version:
        type: string
        description: image version (2.478-jdk17)
        required: true
env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_REGISTRY_UAMESPACE }}"
  
concurrency:
  group: ci-buildtrain-${{ github.ref }}-sync-v1
  cancel-in-progress: true

jobs:
  # 启动
  sync:
    runs-on: ubuntu-latest
    outputs:
      matrix: '["generate_image", "generate_debpackage"]'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repository
          submodules: true
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      - name: Docker version
        shell: bash
        run: |
          # Clean up workspace
          path="${{ github.workspace }}/repository/src/workspace"
            
          docker --version
          docker compose version
      - name: Check docker image
        shell: bash
        run: |
          docker pull ${{ github.event.inputs.pull_url }}:${{ github.event.inputs.image_version }}
          docker images
      - name: Export docker image
        shell: bash
        run: |
          # docker image save -o ${{ github.event.inputs.image_name }}-${{ github.event.inputs.image_version }}.img ${{ github.event.inputs.pull_url }}:${{ github.event.inputs.image_version }}
          docker pull ${{ github.event.inputs.image_name }}
          # 获取镜像的完整名称，例如kasmweb/nginx:1.25.3（命名空间/镜像名:版本号）
          image=${{ github.event.inputs.image_name }}
          # 获取 镜像名:版本号  例如nginx:1.25.3
          image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
          new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
          echo "docker tag $image $new_image"
          docker tag $image $new_image
          echo "docker push $new_image"
          docker push $new_image
 
